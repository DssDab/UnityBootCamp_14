1교시 : 기본설정

씬 뷰에서 씬 화면에 대한 설정을
Iso로 변경합니다

씬 기즈모 [Back]
  	y
           ㅁ x

카메라의 Projection
Orthographic으로 변경
y=0

Directional Light 삭제

Window -> Rendering -> Light

Environment 설정
Source -> Color(Skybox 대신 사용)
Ambient Color 흰색 설정
(주변광)

----------------------------------------------------------------------------------
플레이어 이동 코드 설계
Player 오브젝트 생성(Cube)
Bullet 오브젝트 생성 (Capsule)

Scripts 폴더 생성
--> PlayerMove.cs (이동 기능)
--> Bullet.cs (총알 설정)
--> PlayerFire.cs (발사 도구)

Project Settings -> Player
-> other settings에서
Active Input Handling 설정이 
Both인지 확인

prefabs 폴더 생성
- Bullet

Player
 -> PlayerMove.cs
 -> PlayerFire.cs

Bullet
 -> Bullet.cs
====================================================
2교시 : 적 만들기
Enemy obj 생성
pos y = 4
 --> Enemy.cs


리지드 바디 복습
Mass(질량)
이 값이 클수록 무거워집니다.
ex) AddForce()같은 기능을 사용할 때 영향을 받음

Use Gravity : 체크 해제 시
중력의 영향을 받지 않습니다.

Is Kinematic : 해당 기능 체크 시
중력을 포함한 모든 물리적인 힘을
받지 않는 상태로 설정됩니다.

Constraints는 물체에 대한 제약을
걸어줍니다.
Freeze 기능) 해당 위치에 대한
멈춤
보통 회전 값에 대한 Freeze를 많이
걸어준다.
2D일 경우에는 Z축 Rotation Freeze

Damping : 저항 값
Linear <- 이동 속도에 대한 설정
값이 높을수록 빠르게 감속하게 됩니다.
설정을 통해 물체의 움직임을 자연스럽게 연출
할 때 설정합니다.

Angular <- 회전 속도에 대한 설정
값이 높을수록 빠르게 회전을 멈추게 됩니다.
0으로 설정되면 회전 운동 무한

Interpolate(보간)
- None : 아래의 기능을 적용합니다.
- Interpolate(보간) : 주어진 범위 내에서 값을 추정
--> 두 물리 업데이트에서의 리지드바디의 위치와 속도를 이용해
현재 프레임에서의 위치를 계산하고 적용하는 방식

- Extrapolate(외삽) : 주어진 범위를 벗어난 영역에서 값을 추정
--> 이전 물리 업데이트에서 위치와 속도를 사용하고 다음 값의 위치를
예측해서 현재 프레임의 위치를 계산하는 방식(앞선 움직임, 정확도가 따로
요구되지 않고, 영향을 주는 다른 물리 요소가 없는 일정한 움직임 구현)

기능 
AddForce(Vector3, ForceMode mode);
오브젝트가 x,y,z축 방향으로 물리적인 힘을 받도록 합니다.

MovePosition(Vector3 position);
해당 위치로 이동한다.

MoveRotation(Quaternion rot);
해당 회전 값이 되도록 회전한다.
----------------------------------------------------------------------------------
적 생성기(Generator)
EnemyManager.cs를 통해 일정 시간마다 적을 생성하는 기능


====================================================
3교시 : 적에 대한 설정 수정 1차

1. 아래로만 떨어지는 적이 있는 가 하면
   플레이어를 추적하는 적도 나올 수 있음.(패턴 다양화)

2. 생명 주기가 너무 똑같음.
   변경점을 주고 싶습니다.
====================================================
4교시 : 충돌 판정 레이어 선정

게임 오브젝트에 대한 분류를 위해 사용하는 값
태그 : 단일
레이어 : 뭉탱이


태그(tag) : 오브젝트 식별 용도
트리거, 물리 충돌에 대한 비교
// 충돌체의 태그를 비교했는데 Bullet인 경우
if(collision.transform.CompareTag("Bullet")
{

}
// tag가 "Bullet"과 같다면
if(collision.transform.tag == "Bullet")
{

}
두 기능 중에서는 따로 할당 없이 태그 비교가 가능한
CompareTag가 사용된다.
(CompareTag는 해당 태그가 실제로 존재하는지의 여부도
내부에서 체크해주며, 에러로 찍어준다.)

유니티에서 gameObject에서 문자열을 가져오는 경우 
문자열의 복제본이 생성됩니다.

----------------------------------------------------------------------------------
레이어(Layer)
기본 레이어 default
0~7번 기본 레이어 설정
8~31번 커스텀 레이어 설정

레이어의 용도
1. 선택적 렌더링
카메라 등에서 특정 레이어만 렌더링
하는 설정을 처리할 수 있습니다.

2. 레이어 충돌 매트릭스 설정
레이어를 기반으로 충돌 감지 여부를
설정할 수 있습니다.
Edit-> Project Settings -> Physics -> Settings

실제로 오브젝트 간의 체크가 해제된 부분에 대해서는
연산 처리를 하지 않기 때문에 불필요한 연산이 줄어
들게 되고 이는 자원과 시간을 아끼는 행위

3. 레이 캐스트 충돌
LayerMask를 통해 특정 레이어와의 충돌을 판정할 수 있다.

4. 정렬 레이어

게임 오브젝트 내에서의 렌더링 순서를 정의하는 기능



Tags&Layers 창에서 태그와 레이어를
관리할 수 있습니다.

====================================================
5교시) 이미지 적용 

Unity 6에서는 에디터 툴바 라인에 
Asset Store 칸이 제공되고 있습니다.
또는 Window 메뉴의 Asset Store를 통해
들어 갈 수 있습니다.

AwesomCartoon Airplanes <- 캐릭터
, 적 이미지

Cartoon FX Remaster Free
(이펙트)

Cartoon Low Poly Pack
(총알 이미지)




에셋이 git에 포함이 안되게 설정한 만큼
ReadME 파일 등을 활용해 어떤 에셋을 
추가해야 하는지 등을 남겨놓으면
프로젝트 사용에 문제가 없을 것이다.




에셋이 분홍색으로 뜨는 경우

렌더링에 대한 에러이며,
쉐이더가 문제가 되는 경우 발생합니다.

1. 사용하던 쉐이더 파일이 프로젝트
내에서 삭제된 경우

2. 현재 플랫폼 기준에 맞지 않는 쉐이더를
사용했을 경우(Legacy Shader를 URP 환경에서 사용한다.)

3. 다운받은 에셋에서 쉐이더가 빠져있는 경우

4. 커스텀 셰이더를 쓰는 에셋인 경우

머리티얼 선택 후
Edit -> Rendering -> Convert URP
를 통해 URP로 전환합니다.

전체 자동 변경 방법
(단 안되는 경우도 있어서 위의 수동 방법도
알고 있어야 합니다.)


====================================================
6교시 : 이펙트 넣기

적에게 폭발 공장을 등록합니다.
충돌이 발생할 경우 공장에 등록해둔
폭발 효과를 생성합니다.

적 프리팹에 폭발 공장(이펙트) 등록

배경 추가
Space star field backgrounds

이미지 하나를 골라 Clamp로 Wrap Mode를
변경합니다.

Materials의 Tiling을 조작해보면 wrap
모드의 처리 방식을 확인해볼 수 있다.
====================================================
7교시 : 점수 기능 추가
적을 제거할 때 마다 점수가 증가하는 방식

+ 코드 리팩토링 도전

텍스처 이미지 변경 코드(BaseMap)
public Texture2D texture;
material.SetTexture("_BaseMap", texture);


싱글톤 형태의 코드
1) 자기와 같은 형태의 전역 인스턴스를 선언합니다.
public static 클래스명 Instance;
>> 외부에서는 ScoreManger.Instance라고 검색이 가능해지며
Instance는 클래스에 대한 결과물(인스턴스)이기에
클래스명.변수명, 클래스명.함수()를 사용할 수 있게 됩니다.

결과적으로 외부에서 직접 연결하지 않고 기능을 사용하기 위함.

2) 프로그램 내에서 유일한 데이터로 설계한다.
보통 게임의 시스템을 관리하는 매니저 코드들은 싱글톤으로
설계됩니다.

====================================================


