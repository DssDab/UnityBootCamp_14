오늘의 C# SOLID(5가지 원칙의 약어)
>> 소프트웨어의 유지보수성과 확장성을 높이기 위해 제시되는 지침서

SRP(Single Responsibility Principle)
클래스는 하나의 책임만을 진다. 이는 클래스의 응집도를 높이고 변경 시의 영향을 최소화하는 방법이다.
이를 어기면 다른 기능에 영향을 많이 미치게 되 버그 발생 확률이 높아지고, 코드의 유지보수 작업 시에 어려움이 발생할 수 있으며 코드의 가독성도 떨어지게 된다.

OCP(Open/Closed Principle)
SW 구성 요소는 기존 코드를 수정하지 않고도 새로운 기능이 추가될 수 있게 설계되어 있어야 합니다.
이를 어길 시 기존 코드의 변경이 예기치 못한 부분에서의 오류로 이어지고, 하나의 수정이 전체 구조에 영향을 미치게 된다.

LSP(Liskov Substitution Principle)
자식 클래스는 부모 클래스의 기능을 완전히 대체할 수 있어야 한다.
이를 어길 시 다형성이 깨지며 예외 상황이 발생하기 쉬워져 코드의 안전성을 저해하게 됩니다.

ISP(Interface Segregation Principle)
인터페이스에 대한 분리는 불필요한 메소드 구현을 방지하게 되며 여러 개의 인터페이스가 하나의 통합 범용 인터페이스보다 낫다.
이를 어길 시 필요하지 않는 메소드까지 강제 구현해야하고 불필요한 의존성이 생기게 되 인터페이스의 장점이 퇴색된다.

DIP(Dependency Inversion Principle)
세부 사항이 추상화에 의존하게 설계하라. 모듈 간 의존 관계를 최소화해 코드의 확장성과 유지보수성을 확보해야 한다.