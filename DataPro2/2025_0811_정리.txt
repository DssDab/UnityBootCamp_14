유니티 라이프사이클(Unity LifeCycle)
==================================================
PlayerPrefs
간단한 데이터를 로컬에 저장하고 관리하는 용도로 사용됩니다.(레지스트리 탐색기를 통해 위치 확인 가능)
게임 상태, 설정 레벨 진행 상태 등을 저장하는 용도로 사용됩니다.
 Key Value 쌍의 형태로 데이터를 저장합니다.
정수, 부동 소수점, 문자열 등을 저장합니다

 DeleteAll : 모든 키와 값을 제거합니다.
 DeleteKey(string key) : 주어진 키에 해당하는 값을 제거합니다.
 SetFloat(string key, float value) , SetInt(string key, int value), SetString(string key, string value) :키에 해당하는 값을
저장합니다.
 GetFloat(string key, float default value) , GetInt(string key, int default value), GetString(string key, string default 
value)
 : 해당 키를 통해 저장된 데이터를 가져오며, 지정한 키에 연결한 값이 없다면 기본 값(default value)를 
return합니다.
==================================================
Json
 Javascript Object Notation의 약어로 모든 값이 직렬화가 가능한 키 - 값 쌍으로 이루어진 데이터를 
텍스트로 사용하는 개방형 표준 포맷
JsonUtility : 유니티에서 제공하는 Object -> Json, Json -> Object를 지원하는 클래스입니다.
 json으로 만들어줄 코드는 클래스 형태입니다.
 Data data = new Data(“이름”, 레벨, 돈, 공격력 … ); // 클래스 인스턴스 생성 
string jsonData = JsonUtility.ToJson(data); //해당 인스턴스를 json에서 쓸 데이터로 변경(string)
 Data player = JsonUtility.FromJson<Data>(jsonData); //해당 데이터를 통해 클래스에 값 전달
==================================================
Resources 폴더
해당 폴더는 유니티에서
Resources.Load 기능을  통해
런타임에서 애셋을 로드할 수 있게
해주는 특수 폴더입니다.

해당 폴더에 너무 많은 양의 애셋이 존재한다면
성능에 영향을 줄 수 있습니다.

정말 필요한 리소스만 해당 폴더에
직접 배치하고, Addressables 등을
통한 동적으로 리소스 다운로드를 시도합니다.(대용량의 경우)
AWS

json 파일 내부 작업 방법
1. 객체(Object)
{"Key" : "value", ... }

2. 배열 (Array)
[값1,값2,...]

3. String, Number(정수 / 실수), Boolean, null

4. JSON 파일을 생성하고 저장하는 기능
JsonMaker.cs

5. JSON 파일 불러오기
==================================================
Scriptable Object
유니티에서 제공해주는 해당 클래스는 씬에 존재하지 않아도 저장 가능한 데이터 
컨테이너로서 사용됩니다.
동일한 데이터를 여러 객체가 공유할 수 있으며, 중복 데이터의 생성을 방지해줄 수 있습니다.
인스펙터 내에서 값 설정이 가능하고 에셋 파일로 저장이 가능합니다.
런타임 환경에서도 읽을 수 있습니다.
코드와 데이터를 분리해 관리하기 편합니다.
 [CreateAssetMenu(fileName = "파일명", menuName = "경로/기능명")]
 public class 파일명 : ScriptableObject
 {
   …
 }

각 데이터 별 정리

JSON
외부 텍스트 파일 형태로 저장 관리 가능
에디터와 런타임 모두 사용이 가능한 데이터
데이터 구조가 자유로운 편
ex) 세이브 데이터, 서버 통신용 데이터(DB 연동),
동적인 데이터


SO
유니티 에셋(파일) 형태로 프로젝트 내부에 저장
에디터와 굉장히 친화적인 데이터
수정사항이 바로 반영되고, 런타임에
빠르게 로드하고 참조도 가능(메모리 효율 높음)
ex) 정적인 데이터 구현
    고정형 데이터 (아이템, 퀘스트, 몬스터, 스킬 데이터)

PlayerPrefs
유니티가 제공하는 키-값 저장소
레지스트리, XML,Plist 등 내부에 저장되는 방식

- 볼륨, 퀘스트 완료 여부, 캐릭터 상태, 환경설정

===================================================

JSON 데이터 연습 문제

StartScene을 생성합니다.(시작 메뉴)
NextScene을 생성합니다.(로그인 성공)

1. 새로 하기를 누를 경우 기존의 캐릭터 정보가 제거됩니다.
2. 새로 하기를 누르면 창이 뜨면서 캐릭터에 대한 설정을 고를 수 있습니다.
3. 확인 버튼을 누르면 캐릭터의 생성이 완료되며 새 씬으로
   이동됩니다. 해당 씬에서는 캐릭터의 로그인을 알리는 메세지가 출력됩니다.
4. 이어 하기의 경우는 캐릭터 정보가 없는 경우라면 비활성화됩니다.
5. 이어하기에 성공하면 바로 씬으로 이동됩니다.
6. R을 누를 경우 저장되어있는 캐릭터의 정보가 제거됩니다.